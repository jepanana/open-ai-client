use serde::{Deserialize, Serialize};

use super::ToolType;

/// The tool call generated by the model, such as function call.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ToolCall {
    ///The ID of the tool call.
    pub name: String,

    /// The type of the tool. Currently, only `function` is supported.    
    #[serde(rename = "type")]
    pub _type: ToolType,

    /// The function that the model called.
    pub function: FunctionCall,
}

/// The name and arguments of a function that should be called, as generated by the model
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct FunctionCall {
    ///The name of the function to call
    pub name: String,

    /// The arguments to call the function with, as generated by the model in JSON format.
    /// Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema.
    /// Validate the arguments in your code before calling your function
    pub arguments: String,
}
